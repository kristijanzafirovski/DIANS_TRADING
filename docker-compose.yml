version: '3.9'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo > /dev/tcp/localhost/9092" ]
      interval: 10s
      timeout: 5s
      retries: 5

  cassandra:
    image: cassandra:4.1
    ports:
      - "9042:9042"
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "describe keyspaces"]
      interval: 5s
      timeout: 5s
      retries: 10

  cassandra-init:
    image: cassandra:4.1
    depends_on:
      - cassandra
    entrypoint: >
      sh -c "
        until cqlsh cassandra 9042 -e 'describe keyspaces'; do sleep 2; done;
        cqlsh cassandra 9042 -e \"CREATE KEYSPACE IF NOT EXISTS trading WITH replication = {'class':'SimpleStrategy','replication_factor':1};\";
        cqlsh cassandra 9042 -e \"CREATE TABLE IF NOT EXISTS trading.data (symbol text, timestamp bigint, price double, PRIMARY KEY(symbol, timestamp));\"
      "

  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: trading
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "user", "-d", "trading" ]
      interval: 5s
      timeout: 5s
      retries: 5

  data-storage-service:
    build:
      context: .
      dockerfile: data-storage-service/Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      cassandra:
        condition: service_healthy
      kafka:
        condition: service_started




  real-time-processing-service:
    build: 
        context: .
        dockerfile: real-time-processing-service/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy



  data-analysis-service:
    build: 
        context: .
        dockerfile: data-analysis-service/Dockerfile
    ports:
      - "8001:8001"
    depends_on:
      - data-storage-service

  data-visualization-service:
    build:
      context: data-visualization-service
      dockerfile: Dockerfile
    ports:
      - "3100:80"
    depends_on:
      - data-analysis-service
      - data-storage-service

  data-ingestion-service:
    build:
      context: .
      dockerfile: data-ingestion-service/Dockerfile
    ports:
      - "3001:3000"
    depends_on:
      cassandra:
        condition: service_healthy
      kafka:
        condition: service_started

    environment:
      SPRING_DATA_CASSANDRA_CONTACT_POINTS: cassandra
      SPRING_DATA_CASSANDRA_PORT: 9042
      SPRING_DATA_CASSANDRA_KEYSPACE_NAME: trading
      SPRING_DATA_CASSANDRA_SCHEMA_ACTION: CREATE_IF_NOT_EXISTS
      SPRING_DATA_CASSANDRA_LOCAL_DATACENTER: datacenter1
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password

